#!/bin/csh -f
#
# ===========================
# Logging helpers
# ===========================
alias write_log  'echo "[INFO] \!*"'
alias write_warn 'echo "[WARN] \!*"'
alias write_err  'echo "[ERR]  \!*"'

# ===========================
# Step0: Check env & args
# ===========================
if (! $?SDS_ROOT) then
    write_err "SDS_ROOT not set. Please export SDS_ROOT before running."
    exit 1
endif

if ($#argv < 8) then
    write_err "Usage: $0 <process> <PROC> <PMA> <RAW> <FW> <REL> <HF_SIGDET> <header_reg_addr_def_new> [step_selection]"
    write_err "Optional: step_selection can be 'all' (default), a single step (e.g. 3), or a range (e.g. 2-5)"
    exit 1
endif

set sds_root                    = $SDS_ROOT
set process                     = $1
set PROC			= $2
set PMA				= $3
set RAW				= $4
set FW				= $5
set REL				= $6
set HF_SIGDET			= $7
set header_reg_addr_def_new	= $8
set step_selection              = "all"
if ($#argv >= 9) set step_selection = $9

write_log "SDS_ROOT = $sds_root"
write_log "Process  = $process"
write_log "PROC     = $PROC"
write_log "PMA      = $PMA"
write_log "RAW      = $RAW"
write_log "FW       = $FW"
write_log "REL      = $REL"
write_log "HF_SIGDET= $HF_SIGDET"
write_log "REG_ADDR_DEF = ${header_reg_addr_def_new}"
write_log "Step Selection = $step_selection"

echo "All inputs are correct? (Enter 1 for Yes, anything else for No)"
set correct_condition=$<
if ($correct_condition != 1) then
    echo "try again"
    exit
endif

# ===========================
# Helper: Check if step should run
# ===========================
# Usage: call `should_run <step_number>`
# Returns true if that step is included in step_selection
alias should_run '
    set step_num = \!:1; \
    if ("$step_selection" == "all") then \
        exit 0; \
    else if ("$step_selection" =~ *"-"*) then \
        set start = `echo $step_selection | cut -d"-" -f1`; \
        set end   = `echo $step_selection | cut -d"-" -f2`; \
        if ($step_num >= $start && $step_num <= $end) exit 0; \
    else if ($step_num == $step_selection) then \
        exit 0; \
    endif; \
    exit 1;
'

# ===========================
# Step1: Check testchip dir
# ===========================
if ( `should_run 1` == 0 ) then
    write_log ">>> Executing Step1: Check testchip dir"
    set testchip_dir = "$sds_root/pma/tech/$process/ipxact/testchip"
    if (! -d $testchip_dir) then
        write_log "Creating testchip dir: $testchip_dir"
        mkdir -p $testchip_dir
    else
        write_log "Testchip dir exists: $testchip_dir"
    endif
endif

# ===========================
# Step2: Sync ASM file
# ===========================
if ( `should_run 2` == 0 ) then
    write_log ">>> Executing Step2: Sync ASM file"
    set path_asm = "$sds_root/pcs_raw/firmware/code/startup_off_cal_adapt.asm"
    write_log "Syncing ASM file: $path_asm"
    if ($FW == 2.8_5) then
        p4 sync -f ${path_asm}"#"148
    else if ($FW == 2.9) then
        p4 sync -f ${path_asm}"#"158
    else if ($FW == 2.8_6) then
        p4 sync -f ${path_asm}"#"156
    else if ($FW == 2.8_9) then
        p4 sync -f ${path_asm}"#"157
    else if ($FW == 3.0) then
        p4 sync -f ${path_asm}"#"160
    else if ($FW == 2.9_1) then
        cp -f $sds_root/pcs_raw/firmware/code/dev/2_9_1/startup_off_cal_adapt.asm ${path_asm}
    endif
endif

# ===========================
# Step3: Firmware header sync & xls copy
# ===========================
if ( `should_run 3` == 0 ) then
    write_log ">>> Executing Step3: Firmware header sync & update"
    # ... (your existing step3 code unchanged)
endif

# ===========================
# Step4: Update reg_addr.def
# ===========================
if ( `should_run 4` == 0 ) then
    write_log ">>> Executing Step4: Update reg_addr.def"
    # ... (your existing step4 code unchanged)
endif

# ===========================
# Step5: Generate param_thresh_set.def
# ===========================
if ( `should_run 5` == 0 ) then
    write_log ">>> Executing Step5: Generate param_thresh_set.def"
    # ... (your existing step5 code unchanged)
endif

# ===========================
# Step6: Generate re_gen_fw file
# ===========================
if ( `should_run 6` == 0 ) then
    write_log ">>> Executing Step6: Generate re_gen_fw file"
    # ... (your existing step6 code unchanged)
endif

# ===========================
# Step7: Source re_gen_fw file
# ===========================
if ( `should_run 7` == 0 ) then
    write_log ">>> Executing Step7: Source re_gen_fw file"
    # ... (your existing step7 code unchanged)
endif

# ===========================
# Step8: Rate restore
# ===========================
if ( `should_run 8` == 0 ) then
    write_log ">>> Executing Step8: Rate restore"
    # ... (your existing step8 code unchanged)
endif
