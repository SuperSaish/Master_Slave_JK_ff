Important Points:

Make sure client and root are set correctly.
The label to be synced exist in perforce.
Proc is synced with the correct label.

Compilation Steps:

Creating a 'testchip' directory

Check if a directory named 'testchip' exists in '$UP16_ROOT/pma/tech/<proc>/ipxact/'

If it doesn't exist, create it.

Command = mkdir testchip

2. Copying sds_cregs.v file.

a. Go to pcs_raw/firmware/code/<proc>

Command = cd $UP16_ROOT/pcs_raw/firmware/code/<proc>

b. Copy sds_cregs.v from path '$UP16_ROOT/pma/tech/<proc>/ipxact/sds_cregs' to '$UP16_ROOT/pcs_raw/firmware/code/<proc>'

Command = cp -rf ../../../../pma/tech/<proc>/sds_cregs.v .

c. Open P4 check. Check what revision of sds_cregs.v is synced.

d. Rename the 'sds_cregs.v' to 'sds_cregs.v_<rev_number>'

Command = mv sds_cregs.v sds_cregs.v_<rev_number>

3. Generating reg_addr.def file

We have to generate a reg_addr.def file in '$UP16_ROOT/pcs_raw/firmware/code/<proc>' directory. The srcipt to generate re_addr.def based on the sds_cregs.v file is '16k_get_reg_addr.pl' which exits in '$UP16_ROOT/pcs_raw/firmware/bin/'. We have to source the script.

Command = ../../bin16k_get_reg_addr.pl sds_cregs.v_<rev_number> reg_addr.def_<rev_number>         (Give this command from $UP16_ROOT/pcs_raw/firmware/code/<proc>/ )

Diff between the generated reg_addr.def_<rev_number> and existing reg_addr.def.

Command = gvimdiff reg_addr.def reg_addr.def_<rev_number>

If there are no differences, proceed with removing the generated re_addr.def_<rev_number> file.

If there are differences, overwrite the original reg_addr.def file.

Command = mv reg_addr.def_<rev_number> reg_addr.def

4. Update FW Header

firmware.header is stored in '$UP16_ROOT/pcs_raw/firmware/code/<proc>'. We have to update it according to the required  proc label and FW.

There are  7 settings to be set in firmware.header.

a. PMA & RAW - Check if the PMA & RAW version matches with the PMA & RAW version of label. If not, update it.

b. FW = Update this setting to the required FW version you are compiling for.

c. SET_EXCEL_REV & ADPT_REVISION = Check COS JIRA for each required FW version. There you will find what values need to be set for these settings.

FW COS JIRAs : 

[P80001562-696443] [COS] FW 16K SRAM Version - Jira
[P80001562-678264] [COS] FW2.5 - Jira
[P80001562-673945] [COS] FW2.5_5 - Jira
[P80001562-682592] [COS] FW2.6_A - Jira
[P80001562-674084] [COS] FW2.8_5 - Jira
[P80001562-679464] [COS] FW2.8_6 - Jira
[P80001562-671459] [COS] FW2.8_7 - Jira
[P80001562-671357] [COS] FW2.8_9 - Jira
[P80001562-690047] [COS] FW2.9 - Jira
[P80001562-671446] [COS] FW3.0 - Jira
[P80001562-722829] [COS] FW3.1 - Jira

d. REG_ADDR_DEF = Update it to the <rev_number> of sds_cregs.v file which you took.

e. PROCESS = Check if the process matches with the process of proc taken. If not, update it.

5. Update the required xls files.

All four xls files, namely adapt_set.def.asic.xls, adapt_set.def.cosim.xls, cal_set.def.asic.xls and cal_set.def.cosim.xls, are stored in '$UP16_ROOT/pcs_raw/firmware/code/<proc>'. 

Check COS JIRA for each required FW version. There you will find what version of these xls need to be taken.

a. For 0.3, 0.4 and 0.63 versions, copy them from my scratch. Path: /slowfs/us01dwt2p394/saish/<version>/

Command = cp -f /slowfs/us01dwt2p394/saish/<version>/*xls $UP16_ROOT/pcs_raw/firmware/code/<proc>

b. For 0.62 and 0.2 versions, copy them from hfsm directory in '$UP16_ROOT/pcs_raw/firmware/code/'

Command = cp -f ../hfsm/<version>*xls .   (Give this command from $UP16_ROOT/pcs_raw/firmware/code/<proc>/ )

Note = It is advised to keep a copy of these xls files in your scratch as you will require them often.

6. Updating the pram_thresh_def.set file. ( This step only required for FW version 2.9 and above).

Create a file by the name pram_thresh_def.set. Write the text shown in the image.

To set the proper values, refer e32_adaptation_specification.doc. Check COS JIRA of the required version. ADPT_REVISION determines the version of adapt_spec needed.

Adpt_spec is stored MSIP Digital Sharepoint - Products - Firmware - msip-digital by the name e32_adaptation_specification.doc. Open the correct version of adapt_spec by going into version history.

After opening, search for the proc name. In Table 5‑2: RX TERM code thresholds for AFE resistor trim, you will find the required values withe the release of proc.

We have to use values corresponding to lower threshold of cal_afe_trim column 1,2 and 3.

All the values in Table 5-2 are in decimel. We have to set the values in Hexadecimel. So, we need to convert them to Heaxa and then inout them in file.

Note = In some cell of table, '-' is there insteand of a number. In that case, we consider the value as zero.

Some procs have different values for different releases. Check you release and use appropriate values.

Some procs have different values for Gen 1-4 and Gen 5. Use appropriate values for it as well.

Note = It is advised to keep a copy of param_thresh_set.def in your scratch as you will require it often. Copy the file and change it's values everytime.

7. Getting the required asm file.

startup_off_cal_adapt.asm is stored in $UP16_ROOT/pcs_raw/firmware/code/ . Every FW version has a startup_off_cal_adapt.asm file.

To get the correct version, open Perforce. Each checkin has a fw version associated with it. Get that revision.

If it doesn't exist, copy the required file from dev/<version>/ directory.

Command = cp -f dev/<version>/startup_off_cal_adapt.asm .       (Give this command from $UP16_ROOT/pcs_raw/firmware/code/ )

8. Updating the re_gen file. - Part 1

re_gen_fw.<proc> is stored in $UP16_ROOT/pcs_raw/firmware/code/  

Each proc has it's own re_gen file with name re_gen_fw.<proc>. It has 9 types of macros.

a. process = Check if the process matches with the process of proc taken. If not, update it.

b. ARCH = Check if the arch matches with the arch of proc taken. If not, update it.

c. RAW = 

Make sure to enable macros PCS_RAW_1.14 for RAW == 1.14
Make sure to enable macros PCS_RAW_1.15 for RAW ≥ 1.15
Make sure to enable macros PCS_RAW_1.18 for RAW ≥ 1.18
Make sure to enable macros PCS_RAW_1_18_GT for RAW ≥ 1.18 & PMA>=3.0

d. PMA = 

Make sure to enable macros PMA_3.1 for pma ≥ 3.1
Make sure to enable macros PMA_3.0 for pma ≥ 3.0
Make sure to enable macros PMA_2.9 for pma ≥ 2.9
Make sure to enable macros PMA_2.8 for pma ≥ 2.8
Make sure to enable macros PMA_2.6 for pma ≥ 2.6

e. BUF_9BIT = usually not used.

f. DATA_DEL_2 = set this to 'DATA_DEL_2' when PMA>2.5

g. TC = Used for testchip compilations. Set this to 'X321_TC' when doing compilations for testchip.

9. Updating the re_gen file - Part 2

a. The REL macros need to be selected exclusively depending on the proc, release, pma, raw and fw version.

Please follow this sheet to know which macros to include: MACROS.xlsx

Note:

The above sheet is made by me. It will be updated in future as new macros are added or old one's are removed. It is derived from e32_fw_compile_macros.xlsx
Total 6 macros, namely VGEN, SIGDET, REMOVE_DCC_RANGE, DM_RANGE_CTRL BUF_ADPT and BYPASS_ADPT, have been specifed in e32_adaptation_specification.docx. Theses are also included in above sheet.
The workaround macros need not be included if you are doing rate restore.  

b. The DM_RANGE_CTRL macros have been specified in e32_adaptation_specification.docx in Table 5‑1: Project and release specific calibration state skips. It has just two macros.

DM_RANGE_CTRL = All AC Coupled DCC algo should have this enabled.
REMOVE_DCC_RANGE = in Table 5‑1: Project and release specific calibration state skips, if DCC_RANGE has a 'Y' for particular proc and release, don't include this. Else, include this.

10. Running the script.

a. Check client is set correctly or not.

Command = echo $P4_CLIENT

b. Set Alias for cp 

Command = alias cp 'cp -f'

c. Do csh

d. FInally source and run re_gen file.

Command = source re_gen_fw.<proc>

Note =

When compilation is running, constantly check the terminal for any errors. 
The MEM_BANK_<number> should not be greater tha 4096. If it happens, MEM_BANK overflows. In that case, try reruning the compilation. If it still overflows, we have to change the start and end points of MEM_BANK in startup_off_cal_adpt.asm file.

In case you have to rerun compilation, follow these steps:

a. Remove the backup startup file.

Command = rm -rf  startup_off_cal_adapt.asm.BAK

b. The startup_off_cal_adapt.asm is changed during compilation. Hence, you have get the revision again or re copy the startup_off_cal_adapt.asm file in '$UP16_ROOT/pcs_raw/firmware/code'

c. Revert all the files opened for edit.

Command = p4 revert $UP16_ROOT/pcs_raw/firmware/code/<proc>/current_snapshot/*

Command = p4 revert $UP16_ROOT/pma/tech/<proc>/ipxact/*

Important Points:

Rate Restore is done only for specific releases of procs. E32_Rate_Restore.xlsx contains all the procs and rel fo which rate restore needs to be done.
After Rate restore is done, we also checkin the old version of sds_pcs_raw files but we don't tag them.

Rate Restore Steps:

   Create Rate Restore directory in '$UP16_ROOT/pma/tech/<proc>/'

Command = mkdir rate_restore

2. Copy the required sds_pcs_raw files. 

Total 6 files need to be copied. They are:

sds_pcs_raw_ext_rom.bin
sds_pcs_raw_ext_rom.fastsim
sds_pcs_raw_mem_sram_cr_para.fw
sds_pcs_raw_mem_sram_fastsim.fw
sds_pcs_raw_mem_sram_side_load_ecc.bin
sds_pcs_raw_mem_rst.v

Command = cp -f sds_pcs_raw_ext_rom.bin sds_pcs_raw_ext_rom.fastsim sds_pcs_raw_mem_sram_cr_para.fw sds_pcs_raw_mem_sram_fastsim.fw sds_pcs_raw_mem_sram_side_load_ecc.bin sds_pcs_raw_mem_rst.v ../../../../../pma/tech/<proc>/rate_restore/  (Give this command from $UP16_ROOT/pcs_raw/firmware/code/<proc>current_snapshot/ )

3. Copy the 3 required rate restore scripts.

The scripts are stored in $UP16_ROOT/pcs_raw/firmware/bin/ .  The scripts are: 

rate_restore_ecc_enc_dec.pl
rate_restore_gen_ecc.pl
fw_rate_restore_image_gen.py

4. Copy reg_addr.def from ipxact directory in pma

Command = cp -f ../ipxact/reg_addr.def .     (Give this command from $UP16_ROOT/pma/tech/<proc>/rate_restore)

5. Get Rate_Restore.csv 

There are two cases.

a. Rate_Restore.csv exists in perforce. 

Appropriately get the revision of Rate_restore.csv which is identical to one in E32_Rate_Restore.xlsx. 

b. Rate_restore.csv does not exist in perforce or it is not the correct one for release.

Download E32_Rate_Restore.xlsx and seperate the required Rate_restore sheet for your proc and release. Save it as a seperate csv file and name it 'Rate_restore.csv'. Script wont work unless.

Map the csv file to your scratch and then copy it to $UP16_ROOT/pma/tech/<proc>/rate_restore.

6. Load python/3.8.0 module

Check if python module is loaded or not.

Command = module li

You will see python/3.8.0 as one of the modules. If not, then give the following commnad

Command = module load python/3.8.0

7. Running the script.

Command = python3 fw_rate_restore_image_gen.py

Check if the generated files, old and new, have appropriate differences.

8. Copy the updated files.

Total 12 new files are generated, the 6 sds_pcs_raw files are updated and teir older versions are also generated.

a. Copy all 12 generated sds_pcs_raw files into ipxact directory

Command = cp -f sds_pcs_raw* ../ipxact/      (Give this command from $UP16_ROOT/pma/tech/<proc>/rate_restore)

b. Copy the newly updated 6 sds_pcs_raw files into current_snapshot directory.

Command = cp -f sds_pcs_raw_ext_rom.bin sds_pcs_raw_ext_rom.fastsim sds_pcs_raw_mem_sram_cr_para.fw sds_pcs_raw_mem_sram_fastsim.fw sds_pcs_raw_mem_sram_side_load_ecc.bin sds_pcs_raw_mem_rst.v ../../../../pcs_raw/firmware/code/<proc>/current_snapshot/        (Give this command from $UP16_ROOT/pma/tech/<proc>/rate_restore)

c. Copy the 5 files sds_pcs_raw files (except sds_pcs_raw_mem_sram_side_load_ecc.bin) to current_snapshot ipxact folder.

Command = cp -f sds_pcs_raw_mem_sram.fw sds_pcs_raw_ext_rom.bin sds_pcs_raw_mem_sram_fastsim.fw sds_pcs_raw_ext_rom.fastsim sds_pcs_raw_mem_rst.v ../../../../pcs_raw/firmware/code/<proc>/current_snapshot/ipxact/        (Give this command from $UP16_ROOT/pma/tech/<proc>/rate_restore)





